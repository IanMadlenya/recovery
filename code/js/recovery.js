// Generated by CoffeeScript 1.7.1
var active, bb, canvasHeight, canvasWidth, clicked, drawVisualization, graphFrame, mapContainer, mapFrame, mapMask, mapX, mapY, margin, offset, path, pcFrame, projection, reset, svg;

margin = {
  top: 20,
  right: 20,
  bottom: 20,
  left: 20
};

canvasWidth = 1600 - margin.left - margin.right;

canvasHeight = 750 - margin.bottom - margin.top;

svg = d3.select("#visualization").append("svg").attr("width", canvasWidth + margin.left + margin.right).attr("height", canvasHeight + margin.top + margin.top).append("g").attr("transform", "translate(" + margin.left + ", " + margin.top + ")");

offset = {
  rightMargin: 500,
  leftMargin: 50,
  verticalSeparator: 30,
  horizontalSeparator: 30,
  zoomBox: 40,
  tooltip: 5
};

bb = {
  map: {
    x: 0,
    y: 0,
    width: canvasWidth - offset.rightMargin,
    height: canvasHeight * (2 / 3)
  },
  graph: {
    x: offset.leftMargin,
    y: canvasHeight * (2 / 3) + offset.verticalSeparator,
    width: canvasWidth - offset.rightMargin - offset.leftMargin,
    height: canvasHeight * (1 / 3)
  },
  pc: {
    x: canvasWidth - offset.rightMargin + offset.horizontalSeparator,
    y: 0,
    width: offset.rightMargin - offset.horizontalSeparator,
    height: canvasHeight + offset.verticalSeparator
  }
};

mapContainer = svg.append("g").attr("transform", "translate(" + bb.map.x + ", " + bb.map.y + ")");

mapContainer.append("clipPath").attr("id", "clip").append("rect").attr("width", bb.map.width).attr("height", bb.map.height);

mapMask = mapContainer.append("g").attr("clip-path", "url(#clip)");

mapFrame = mapMask.append("g").attr("width", bb.map.width).attr("height", bb.map.height).style("stroke-width", "1.5px");

active = d3.select(null);

clicked = function(d) {
  var bounds, dx, dy, scale, translate, x, y;
  if (active.node() === this) {
    return reset();
  }
  active.classed("active", false);
  active = d3.select(this).classed("active", true);
  bounds = path.bounds(d);
  dx = bounds[1][0] - bounds[0][0] + offset.zoomBox;
  dy = bounds[1][1] - bounds[0][1] + offset.zoomBox;
  x = (bounds[0][0] + bounds[1][0]) / 2;
  y = (bounds[0][1] + bounds[1][1]) / 2;
  scale = 0.9 / Math.max(dx / bb.map.width, dy / bb.map.height);
  translate = [bb.map.width / 2 - scale * x, bb.map.height / 2 - scale * y];
  return mapFrame.transition().duration(750).style("stroke-width", "" + (1.5 / scale) + "px").attr("transform", "translate(" + translate + ")scale(" + scale + ")");
};

reset = function() {
  active.classed("active", false);
  active = d3.select(null);
  return mapFrame.transition().duration(750).style("stroke-width", "1.5px").attr("transform", "");
};

mapFrame.append("rect").attr("id", "mapBackground").attr("width", bb.map.width).attr("height", bb.map.height).on("click", reset);

graphFrame = svg.append("g").attr("transform", "translate(" + bb.graph.x + ", " + bb.graph.y + ")");

graphFrame.append("rect").attr("width", bb.graph.width).attr("height", bb.graph.height).style("fill", "blue");

pcFrame = svg.append("g").attr("transform", "translate(" + bb.pc.x + ", " + bb.pc.y + ")");

pcFrame.append("rect").attr("width", bb.pc.width).attr("height", bb.pc.height).style("fill", "purple");

mapX = bb.map.width / 2;

mapY = bb.map.height / 2;

projection = d3.geo.albersUsa().scale(975).translate([mapX, mapY]);

path = d3.geo.path().projection(projection);

drawVisualization = function(us) {
  mapFrame.append("g").attr("id", "counties").selectAll(".county").data(topojson.feature(us, us.objects.counties).features).enter().append("path").attr("class", function() {
    return "county cat-" + (Math.floor(1 + Math.random() * 9));
  }).attr("d", path).on("click", clicked);
  return mapFrame.append("path").attr("id", "state-borders").datum(topojson.mesh(us, us.objects.states, function(a, b) {
    return a !== b;
  })).attr("d", path);
};

d3.json("../data/topojson/us-states-and-counties.json", function(us) {
  return drawVisualization(us);
});
